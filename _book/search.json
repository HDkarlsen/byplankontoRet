[
  {
    "objectID": "omR.html#spss",
    "href": "omR.html#spss",
    "title": "2  Om R",
    "section": "2.1 SPSS",
    "text": "2.1 SPSS\nR er mest likt SPSS, og spesielt SPSS’ syntaks. Til forskjell fra SPSS er ikke det grafiske brukergrensesnittet (GUI) noe særlig nyttig i R.\nMan kan kjøre R i et GUI som følger med R når man laster programmet, som heter R hva enn versjonsnummeret er, f.eks. R 4.2.2. Men det er bedre å bruke Rstudio til å arbeide med R i. Her får du et bra GUI som blant annet fullfører kodeforslag og har mange andre støttende funksjoner.\nVi arbeider vanligvis i skript, som har forkortelsen .R. Dette er likt SPSS’ syntaksfiler (.sps). Du kan kjøre hele skriptet, eller kun deler av skriptet av gangen. Kjør deler av skriptet ved å enten ha markøren i den linja eller marker flere linjer og trykk ctrl + enter.\nTil motsetning fra SPSS er Rs kodespråk lettere å lese og forstå (personlig mening). Man vil så klart aldri huske alle koder i R, men etter hvert vil en del av dem sitte fordi man bruker dem så ofte. Typiske eksempler på dette er %>%, filter() og mutate(). Se mer om disse i seinere kapitler."
  },
  {
    "objectID": "omR.html#excel",
    "href": "omR.html#excel",
    "title": "2  Om R",
    "section": "2.2 Excel",
    "text": "2.2 Excel\nDet er større forskjell på R og Excel. Excel er bygd rundt det grafiske grensesnittet. Det du ser er det du får (WYSIWYG). Dette har sine fordeler og bakdeler. Den største bakdelen, slik jeg ser det, er at Excel lar deg gjøre dumme ting. F.eks. hoppe over rader, forflytte en kolonne uten å mene det, glemme å markere alle felter, og det verste av alt: slå sammen celler.\nLikevel, det er mange ganger det er bedre å bruke Excel.\nVi kan importere excel-filer til R, hvilket er veldig nyttig. Den største utfordringa med dette er at vi må kjempe mot de bakdelene jeg nevnte over.\n\nI motsetning til både Excel og SPSS så lagrer R dataene bare i internt minne mens du arbeider med dem. Dvs. at du ikke er avhengig av å mellomlagre alt som en .sav, .xlsx., eller .csv-fil. Dette kan bidra til å redusere behovet for mange versjoner av samme fil på ulike tidspunkter."
  },
  {
    "objectID": "omR.html#hvorfor-skal-jeg-bruke-r",
    "href": "omR.html#hvorfor-skal-jeg-bruke-r",
    "title": "2  Om R",
    "section": "2.3 Hvorfor skal jeg bruke R?",
    "text": "2.3 Hvorfor skal jeg bruke R?\nEn typisk tilbakemelding:\n\nDet tar tid å lære, det er en bratt læringskurve, og jeg får feilmeldinger hele tida.\n\nDet er noen fordeler med R som er attraktive for oss:\n\nNår du har laga et skript kan du, uten særlig mange endringer, kjøre skriptet på nytt gang etter gang. Dette sparer deg for mye tid istedenfor å måtte starte på nytt hver gang.\n\nDette er delvis mulig i SPSS-syntaks alt. R oppfordrer i større grad til dette via funksjonene sine, og måten den håndterer data på.\n\nMan kan bruke R til alt. Fra før av kan vi spleise data i SPSS, lage tabeller i Excel, gjøre dem interaktive i Infogram, dele dem via Google sheets, etc. R kan gjøre alt dette i samme programvare/GUI.\nR lese og skrive til de fleste vanlige programmer. Dvs. at vi kan starte en prosess i Excel og så fortsette den i R. Eller vi kan importere en Stata-fil til R, gjøre noen pivots og lagre den som en SPSS-fil. Dermed kan R relativt sømløst puttes inn i arbeidsprosessen. (Enklest blir det så klart å gjøre alt i R.)"
  },
  {
    "objectID": "omR.html#versjonering",
    "href": "omR.html#versjonering",
    "title": "2  Om R",
    "section": "2.4 Versjonering",
    "text": "2.4 Versjonering\nR, Rstudio, og alle pakkene til R kommer i ulike versjoner, f.eks. R v.4.2.2, Rstudio 2023.03.0, etc. Når man installerer en pakke vil den nyeste versjonen som er kompatibel med din versjon av R installeres. Her er noen ting å være oppmerksom på: \n\nNoen nye pakker funker ikke på gamle versjoner av R.\nNoen gamle pakker funker ikke eller litt annerledes på nye versjoner av R.\nNår pakker oppdateres vil noen ganger funksjonene deres endres.\n\nDette er en av bakdelene i tidyverse. De har endra på syntaksen sin slik at tidyverse-syntaks fra 2018 ikke gjelder i 2023. F.eks. pleide man å bruke mutate_at() før i tida for å mutere kun visse rader. Nå bruker man derimot en kombinasjon av mutate() og across() for å oppnå det samme. Dette er irriterende hvis du var vant til den gamle metoden.\n\nDu har alltid tilgang til eldre versjoner av R og Rs pakker. Dette er et viktig kjennetegn ved FOSS (free, open-source software). Hvis du trenger en funksjon fra en gammel versjon av en pakke, kan du alltids nedgradere R-versjonen og laste inn den versjonen av pakka. Jeg nevner det her, men det er mer for viderekommende, og for Linux-fantaster.\n\nPer nå er siste versjon vi har tilgang til på byplankontoret 4.2.3. Hvilken versjon har jeg?\n\nsessionInfo()\n\nR version 4.2.3 (2023-03-15 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=nb-NO.UTF-8  LC_CTYPE=nb-NO.UTF-8    LC_MONETARY=nb-NO.UTF-8\n[4] LC_NUMERIC=C            LC_TIME=nb-NO.UTF-8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.5.4 compiler_4.2.3    magrittr_2.0.3    fastmap_1.1.0    \n [5] cli_3.4.1         tools_4.2.3       htmltools_0.5.4   rstudioapi_0.14  \n [9] stringi_1.7.8     rmarkdown_2.17    knitr_1.40        stringr_1.4.1    \n[13] xfun_0.34         digest_0.6.30     jsonlite_1.8.3    rlang_1.0.6      \n[17] evaluate_0.17    \n\n\nJeg har forrige versjon, 4.2.2. Grunnen er at IT installerte den nye R-versjonen i dag, og jeg ikke vil ta sjansen på at det er små endringer i koden som ødelegger noe jeg har gjort før. Mest sannsynlig vil det går bra. Små endringer, som å gå fra x.x.2 til x.x.3 vil nok ikke ha noen merkbare endringer.\nTilstedeværelsen av alle disse ulike versjonene av pakker og programvare kan kanskje oppleves som plagsomt. Men det er faktisk en fordel, og en styrke ved R. Det medfører at vi kan garantere at et skript er future proof, at det alltids kan kjøre gitt samme data og datamaskin. Se mer om dette hos Brodrigues. Vi har for eksempel ingen garanti for at Excel i 2030 lar oss åpne og behandle filene våre fra 2020. Eller at alle funksjonene vi har i cellene forstås likt i begge versjonene av Excel. Dette er ikke overdrivelse. Da Excel gikk over fra .xls til .xlsx medførte det at nye versjoner av Excel ikke alltid greide å åpna de gamle filformatene. I denne situasjonen er du avhengig av at du får tilgang på en eldre versjon av programvaren for å åpna fila di. Det er ikke sikkert man får."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduksjon",
    "section": "",
    "text": "Dette er en omfattende dokumentasjon av det jeg har gjort i R på Byplankontoret. I tillegg er det et forsøk på å vise de funksjonene man trenger for å arbeide i R. Det er ufattelig mange muligheter når det kommer til R. Dette er bare et lite utvalg, basert på det jeg har brukt mest."
  },
  {
    "objectID": "pakker.html#tidyverse",
    "href": "pakker.html#tidyverse",
    "title": "3  Pakker og funksjoner",
    "section": "3.1 Tidyverse",
    "text": "3.1 Tidyverse\nTidyverse refererer til\n\nen designfilosofi\nen stor gruppe med pakker\nen spesifikk pakke som grupperer et lite antall pakker\n\nDu kan lese mer om Tidyverse på nettsida deres. Det er også en lærebok som går grundigere gjennom alle funksjonene deres, R for Data Science.\nNår man kjører library(tidyverse) vil den laste inn alle pakkene nevnt her. Blant annet dplyr, ggplot2, etc. I tillegg laster den inn enkeltfunksjoner fra andre pakker. F.eks. laster den inn pipe operatoren ( %>%) fra magrittr. Mer om den seinere. Dermed er dette egentlig en snarvei for å slippe å laste inn flere pakker.\nTidyverse-pakkene er designa for å harmonisere med hverandre, og det gjør dem veldig sterke. Den underliggende filosofien gir også et bra rammeverk for andre pakker. Vinn-vinn.\nReint praktisk er det sånn at mange av funksjonene i tidyverse allerede eksisterer i base R. F.eks. filtrering, mutering, og etter R v.4.1., pipe-funksjonen. Jeg bruker likevel tidyverse-variantene fordi disse er så mye lettere å forstå, skrive, og lese. De er utvikla for folk som jobber som oss, med tabeller og datasett. Som nybegynner er det ikke bare bare å forstå forskjellen mellom base R og tidyverse, så her er det viktigste:\n\nNår dere søker opp løsninger vil det ofte presenteres løsninger både i base R og i tidyverse. Dette skjer ofte på StackOverflow.\nDe fleste tidyverse-funksjoner har et datasett som første argument i funksjonen. Dette gjør at vi lett kan pipe funksjoner etter hverandre."
  },
  {
    "objectID": "pakker.html#piper",
    "href": "pakker.html#piper",
    "title": "3  Pakker og funksjoner",
    "section": "3.2 Piper",
    "text": "3.2 Piper\nHvorfor er piper så nyttig? De lar oss flette sammen en serie operasjoner uten å måtte mellomlagre objekter. La oss si at vi har et datasett med biler og deres egenskaper. Vi vil\n\nfiltrere ut dem som har under seks sylindre\ngjøre om vekta fra lbs. til kg.\ngruppere etter antall gir\nvise snitt av miles/gallon (mpg).\n\n\n3.2.1 Uten pipa\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nmtcars <- mtcars\ncars_filtered <- filter(mtcars, cyl >= 6)\ncars_filtered_kg <- mutate(cars_filtered, wt = wt * 0.45359237)\ncars_filtered_kg_grouped <- group_by(cars_filtered_kg, gear)\ncars_filtered_kg_grouped_mean <- summarise(cars_filtered_kg_grouped, snitt = mean(mpg))\n\ncars_filtered_kg_grouped_mean\n\n# A tibble: 3 × 2\n   gear snitt\n  <dbl> <dbl>\n1     3  15.7\n2     4  19.8\n3     5  16.8\n\n\n\n\n3.2.2 Med pipa\n\nlibrary(tidyverse)\ncars_filtered_kg_group_mean <- mtcars %>% \n  filter(cyl >= 6) %>% \n  mutate(wt = wt * 0.45359237) %>% \n  group_by(gear) %>% \n  summarise(snitt = mean(mpg))\n\ncars_filtered_kg_grouped_mean\n\n# A tibble: 3 × 2\n   gear snitt\n  <dbl> <dbl>\n1     3  15.7\n2     4  19.8\n3     5  16.8\n\n\nDet andre eksemplet er\n\nmer lesbart\nmindre stappfult av midlertidige objekter som vi seinere må slette\n\nJeg kommer til å bruke piper en god del både her og i alle skriptene mine. Så det er greit å vite hva det går ut på. Syntaksen x %>% y kan leses som y får x. Vi tar x og sender det til y som tar det inn som sitt første argument. Tidyverse-funksjonene er bygd rundt ideen om at det første argumentet til funksjonene er et datasett. Legg merke til at det er et datasett som er det første objektet i alle funksjonen jeg bruker i eksemplet uten pipe.\nNoen funksjoner, som base::sum() har ikke data som sitt første argument, men en vektor. Hvis man sender et datasett til sum() vil man få en feilmelding.\n\nmtcars %>% sum(wt)\n\nError in mtcars %>% sum(wt): object 'wt' not found\n\n\nFor å få slike funksjoner til å funkere med ei pipe, kan man ofte bruke en funksjon fra magrittr:\n\nmtcars %>% sum(.$wt)\n\n[1] 14045.15\n\n\n. blir her et alias for det aktuelle datasett, og dette er det samme som å skrive:\n\nsum(mtcars$wt)\n\n[1] 102.952\n\n\nDa jeg lærte R var det %>% fra magrittr som var den gjeldende pipa. Den var så nyttig at ei pipe til slutt blei inkorporert i base R. Dette skjedde i R 4.1.0. Base Rs pipe ser slik ut: |>. Den fungerer i hovedsak lik %>%. Når jeg fortsetter å bruke den gamle magrittr-pipa er det bare fordi jeg er gammel og ikke liker å endre på ting som funker. Dessuten har Rstudio en flott snarvei til %>% via ctrl + shift + M.\nDere velger altså sjøl om dere går for %>% eller |>. Husk bare at for å bruke %>% så må tidyverse eller magrittr lastes inn først. (tidyverse låner noen av funksjonene fra magrittr, men laster ikke inn alle funksjonene fra den pakka).\n\nForresten, noen ganger vil dere kanskje se pakker omtalt som online bibliotek (library). Og vi bruker jo funksjonen library() for å laste inn en pakke. Hva er forskjellen på en pakke og et bibliotek? I R er det den mappa hvor alle pakkene som er installert blir lagra som kalles bibliotek. Sjølve funksjonssamlinga kalles en pakke."
  },
  {
    "objectID": "references.html#ressurser-for-å-lære-r",
    "href": "references.html#ressurser-for-å-lære-r",
    "title": "Referanser",
    "section": "Ressurser for å lære R",
    "text": "Ressurser for å lære R\nR for data science\nAdvanced R\nSwirl"
  },
  {
    "objectID": "references.html#produktiv-prokrastinering",
    "href": "references.html#produktiv-prokrastinering",
    "title": "Referanser",
    "section": "Produktiv prokrastinering",
    "text": "Produktiv prokrastinering\nBrodrigues\nRweekly\nRbloggers"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Byplankontoret",
    "section": "",
    "text": "Forord\nDette er en pamflet skrevet for Byplankontorets statistikere, for å gi en kort introduksjon til R. Teksten er skrevet i Quarto."
  }
]